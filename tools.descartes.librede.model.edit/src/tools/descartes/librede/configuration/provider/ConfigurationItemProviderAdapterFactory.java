/**
 * ==============================================
 *  LibReDE : Library for Resource Demand Estimation
 * ==============================================
 *
 * (c) Copyright 2013-2014, by Simon Spinner and Contributors.
 *
 * Project Info:   http://www.descartes-research.net/
 *
 * All rights reserved. This software is made available under the terms of the
 * Eclipse Public License (EPL) v1.0 as published by the Eclipse Foundation
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the Eclipse Public License (EPL)
 * for more details.
 *
 * You should have received a copy of the Eclipse Public License (EPL)
 * along with this software; if not visit http://www.eclipse.org or write to
 * Eclipse Foundation, Inc., 308 SW First Avenue, Suite 110, Portland, 97204 USA
 * Email: license (at) eclipse.org
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 */
/**
 */
package tools.descartes.librede.configuration.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tools.descartes.librede.configuration.util.ConfigurationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConfigurationItemProviderAdapterFactory extends ConfigurationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConfigurationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.LibredeConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibredeConfigurationItemProvider libredeConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.LibredeConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibredeConfigurationAdapter() {
		if (libredeConfigurationItemProvider == null) {
			libredeConfigurationItemProvider = new LibredeConfigurationItemProvider(this);
		}

		return libredeConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.DataSourceConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceConfigurationItemProvider dataSourceConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.DataSourceConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceConfigurationAdapter() {
		if (dataSourceConfigurationItemProvider == null) {
			dataSourceConfigurationItemProvider = new DataSourceConfigurationItemProvider(this);
		}

		return dataSourceConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.WorkloadDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkloadDescriptionItemProvider workloadDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.WorkloadDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkloadDescriptionAdapter() {
		if (workloadDescriptionItemProvider == null) {
			workloadDescriptionItemProvider = new WorkloadDescriptionItemProvider(this);
		}

		return workloadDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.InputSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputSpecificationItemProvider inputSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.InputSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputSpecificationAdapter() {
		if (inputSpecificationItemProvider == null) {
			inputSpecificationItemProvider = new InputSpecificationItemProvider(this);
		}

		return inputSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.EstimationApproachConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EstimationApproachConfigurationItemProvider estimationApproachConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.EstimationApproachConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEstimationApproachConfigurationAdapter() {
		if (estimationApproachConfigurationItemProvider == null) {
			estimationApproachConfigurationItemProvider = new EstimationApproachConfigurationItemProvider(this);
		}

		return estimationApproachConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.OutputSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputSpecificationItemProvider outputSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.OutputSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputSpecificationAdapter() {
		if (outputSpecificationItemProvider == null) {
			outputSpecificationItemProvider = new OutputSpecificationItemProvider(this);
		}

		return outputSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.TraceConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceConfigurationItemProvider traceConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.TraceConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceConfigurationAdapter() {
		if (traceConfigurationItemProvider == null) {
			traceConfigurationItemProvider = new TraceConfigurationItemProvider(this);
		}

		return traceConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.EstimationSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EstimationSpecificationItemProvider estimationSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.EstimationSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEstimationSpecificationAdapter() {
		if (estimationSpecificationItemProvider == null) {
			estimationSpecificationItemProvider = new EstimationSpecificationItemProvider(this);
		}

		return estimationSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.ValidationSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidationSpecificationItemProvider validationSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.ValidationSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidationSpecificationAdapter() {
		if (validationSpecificationItemProvider == null) {
			validationSpecificationItemProvider = new ValidationSpecificationItemProvider(this);
		}

		return validationSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.ValidatorConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidatorConfigurationItemProvider validatorConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.ValidatorConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidatorConfigurationAdapter() {
		if (validatorConfigurationItemProvider == null) {
			validatorConfigurationItemProvider = new ValidatorConfigurationItemProvider(this);
		}

		return validatorConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.ExporterConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExporterConfigurationItemProvider exporterConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.ExporterConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExporterConfigurationAdapter() {
		if (exporterConfigurationItemProvider == null) {
			exporterConfigurationItemProvider = new ExporterConfigurationItemProvider(this);
		}

		return exporterConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.FileTraceConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileTraceConfigurationItemProvider fileTraceConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.FileTraceConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileTraceConfigurationAdapter() {
		if (fileTraceConfigurationItemProvider == null) {
			fileTraceConfigurationItemProvider = new FileTraceConfigurationItemProvider(this);
		}

		return fileTraceConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.TraceToEntityMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceToEntityMappingItemProvider traceToEntityMappingItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.TraceToEntityMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceToEntityMappingAdapter() {
		if (traceToEntityMappingItemProvider == null) {
			traceToEntityMappingItemProvider = new TraceToEntityMappingItemProvider(this);
		}

		return traceToEntityMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.ModelEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelEntityItemProvider modelEntityItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.ModelEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelEntityAdapter() {
		if (modelEntityItemProvider == null) {
			modelEntityItemProvider = new ModelEntityItemProvider(this);
		}

		return modelEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.EstimationAlgorithmConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EstimationAlgorithmConfigurationItemProvider estimationAlgorithmConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.EstimationAlgorithmConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEstimationAlgorithmConfigurationAdapter() {
		if (estimationAlgorithmConfigurationItemProvider == null) {
			estimationAlgorithmConfigurationItemProvider = new EstimationAlgorithmConfigurationItemProvider(this);
		}

		return estimationAlgorithmConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.TraceFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceFilterItemProvider traceFilterItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.TraceFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceFilterAdapter() {
		if (traceFilterItemProvider == null) {
			traceFilterItemProvider = new TraceFilterItemProvider(this);
		}

		return traceFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.ResourceDemand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceDemandItemProvider resourceDemandItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.ResourceDemand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceDemandAdapter() {
		if (resourceDemandItemProvider == null) {
			resourceDemandItemProvider = new ResourceDemandItemProvider(this);
		}

		return resourceDemandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.ExternalCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalCallItemProvider externalCallItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.ExternalCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalCallAdapter() {
		if (externalCallItemProvider == null) {
			externalCallItemProvider = new ExternalCallItemProvider(this);
		}

		return externalCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.configuration.CompositeService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeServiceItemProvider compositeServiceItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.configuration.CompositeService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeServiceAdapter() {
		if (compositeServiceItemProvider == null) {
			compositeServiceItemProvider = new CompositeServiceItemProvider(this);
		}

		return compositeServiceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (libredeConfigurationItemProvider != null) libredeConfigurationItemProvider.dispose();
		if (dataSourceConfigurationItemProvider != null) dataSourceConfigurationItemProvider.dispose();
		if (workloadDescriptionItemProvider != null) workloadDescriptionItemProvider.dispose();
		if (inputSpecificationItemProvider != null) inputSpecificationItemProvider.dispose();
		if (estimationApproachConfigurationItemProvider != null) estimationApproachConfigurationItemProvider.dispose();
		if (outputSpecificationItemProvider != null) outputSpecificationItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (traceConfigurationItemProvider != null) traceConfigurationItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (estimationSpecificationItemProvider != null) estimationSpecificationItemProvider.dispose();
		if (validationSpecificationItemProvider != null) validationSpecificationItemProvider.dispose();
		if (validatorConfigurationItemProvider != null) validatorConfigurationItemProvider.dispose();
		if (exporterConfigurationItemProvider != null) exporterConfigurationItemProvider.dispose();
		if (fileTraceConfigurationItemProvider != null) fileTraceConfigurationItemProvider.dispose();
		if (traceToEntityMappingItemProvider != null) traceToEntityMappingItemProvider.dispose();
		if (modelEntityItemProvider != null) modelEntityItemProvider.dispose();
		if (estimationAlgorithmConfigurationItemProvider != null) estimationAlgorithmConfigurationItemProvider.dispose();
		if (traceFilterItemProvider != null) traceFilterItemProvider.dispose();
		if (resourceDemandItemProvider != null) resourceDemandItemProvider.dispose();
		if (externalCallItemProvider != null) externalCallItemProvider.dispose();
		if (compositeServiceItemProvider != null) compositeServiceItemProvider.dispose();
	}

}
